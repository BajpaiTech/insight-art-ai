import { useState } from 'react';
import { Download, FileText, Image, File, Code } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import html2pdf from 'html2pdf.js';
import { toPng, toJpeg, toSvg } from 'html-to-image';

interface ExportModalProps {
  children: React.ReactNode;
  fileName: string;
  chartContainerId: string;
}

interface ExportFormat {
  id: string;
  label: string;
  extension: string;
  icon: typeof FileText;
  description: string;
}

const exportFormats: ExportFormat[] = [
  {
    id: 'png',
    label: 'PNG Image',
    extension: '.png',
    icon: Image,
    description: 'High-resolution raster image'
  },
  {
    id: 'jpg',
    label: 'JPEG Image', 
    extension: '.jpg',
    icon: Image,
    description: 'Compressed raster image'
  },
  {
    id: 'pdf',
    label: 'PDF Document',
    extension: '.pdf', 
    icon: FileText,
    description: 'Portable document format'
  },
  {
    id: 'svg',
    label: 'SVG Vector',
    extension: '.svg',
    icon: Code,
    description: 'Scalable vector graphics'
  },
  {
    id: 'docx',
    label: 'Word Document',
    extension: '.docx',
    icon: File,
    description: 'Microsoft Word format'
  }
];

export const ExportModal = ({ children, fileName, chartContainerId }: ExportModalProps) => {
  const [isExporting, setIsExporting] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();

  const getChartElement = () => {
    const element = document.getElementById(chartContainerId);
    if (!element) {
      throw new Error('Chart container not found');
    }
    return element;
  };

  const downloadFile = (blob: Blob, fileName: string, extension: string) => {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${fileName}${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const exportAsPNG = async () => {
    const element = getChartElement();
    const dataUrl = await toPng(element, {
      quality: 1.0,
      pixelRatio: 2,
      backgroundColor: '#ffffff'
    });
    
    const response = await fetch(dataUrl);
    const blob = await response.blob();
    downloadFile(blob, fileName, '.png');
  };

  const exportAsJPG = async () => {
    const element = getChartElement();
    const dataUrl = await toJpeg(element, {
      quality: 0.95,
      pixelRatio: 2,
      backgroundColor: '#ffffff'
    });
    
    const response = await fetch(dataUrl);
    const blob = await response.blob();
    downloadFile(blob, fileName, '.jpg');
  };

  const exportAsPDF = async () => {
    const element = getChartElement();
    const opt = {
      margin: 1,
      filename: `${fileName}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, backgroundColor: '#ffffff' },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };
    
    await html2pdf().set(opt).from(element).save();
  };

  const exportAsSVG = async () => {
    const element = getChartElement();
    const dataUrl = await toSvg(element, {
      backgroundColor: '#ffffff'
    });
    
    const response = await fetch(dataUrl);
    const blob = await response.blob();
    downloadFile(blob, fileName, '.svg');
  };

  const exportAsDOCX = async () => {
    // For DOCX, we'll convert to PNG first then embed in a simple HTML structure
    // This is a simplified approach - for full DOCX support, you'd need more complex formatting
    const element = getChartElement();
    const dataUrl = await toPng(element, {
      quality: 1.0,
      pixelRatio: 2,
      backgroundColor: '#ffffff'
    });

    // Create a simple HTML document with the chart image
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${fileName}</title>
        </head>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h1>${fileName}</h1>
          <img src="${dataUrl}" alt="Chart" style="max-width: 100%; height: auto;" />
          <p>Generated by DataStory.AI</p>
        </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    downloadFile(blob, fileName, '.html');
    
    toast({
      title: "Export Note",
      description: "DOCX export provided as HTML. For full DOCX support, consider using a dedicated Word processing tool.",
    });
  };

  const handleExport = async (formatId: string) => {
    if (isExporting) return;
    
    setIsExporting(true);
    
    try {
      switch (formatId) {
        case 'png':
          await exportAsPNG();
          break;
        case 'jpg':
          await exportAsJPG();
          break;
        case 'pdf':
          await exportAsPDF();
          break;
        case 'svg':
          await exportAsSVG();
          break;
        case 'docx':
          await exportAsDOCX();
          break;
        default:
          throw new Error('Unsupported format');
      }
      
      toast({
        title: "Export Successful",
        description: `Your chart has been exported successfully.`,
      });
      
      setIsOpen(false);
    } catch (error) {
      console.error('Export failed:', error);
      toast({
        title: "Export Failed",
        description: "There was an error exporting your chart. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Download className="h-5 w-5 text-primary" />
            Export Chart
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-3">
          <p className="text-sm text-muted-foreground">
            Choose your preferred export format:
          </p>
          
          <div className="grid gap-2">
            {exportFormats.map((format) => {
              const IconComponent = format.icon;
              return (
                <Button
                  key={format.id}
                  variant="outline"
                  className="justify-start h-auto p-4"
                  onClick={() => handleExport(format.id)}
                  disabled={isExporting}
                >
                  <div className="flex items-center gap-3 w-full">
                    <IconComponent className="h-5 w-5 text-primary" />
                    <div className="flex-1 text-left">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">{format.label}</span>
                        <Badge variant="secondary" className="text-xs">
                          {format.extension}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">
                        {format.description}
                      </p>
                    </div>
                  </div>
                </Button>
              );
            })}
          </div>
          
          {isExporting && (
            <div className="flex items-center justify-center gap-2 py-4">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
              <span className="text-sm text-muted-foreground">Exporting...</span>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};